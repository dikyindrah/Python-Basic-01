Catatan:

Argumen dan Parameter

Saat menggunakan Fungsi (Function) kita juga akan mengenal argumen 
dan parameter. 

Argumen adalah nilai yang kita berikan saat kita memanggil fungsi. 
Nilai tersebut akan diteruskan atau dikirim ke parameter pada fungsi 
yang kita panggil.

Contoh:

# Memanggil fungsi tampilkan_teks() dengan argumen teks 
# Hello Wrold
tampilkan_teks('Hello World')


Argumen dapat kita buat dengan variabel atau konstanta.

Contoh:

# Memanggil fungsi tampilkan_teks() dengan argumen variabel
# Variabel berisi teks Hello Wrold
teks = 'Hello World'
tampilkan_teks(teks)

# Memanggil fungsi tampilkan_teks() dengan argumen konstanta
# Nilai ditulis secara langsung di dalam tanda kurung
tampilkan_teks('Hello World')


Parameter adalah variabel yang kita deklarasikan pada fungsi. 
Parameter akan menerima argumen yang kita berikan supaya dapat 
digunakan pada fungsi. 

Contoh:

# Membuat fungsi tampilkan_teks() dengan variabel teks 
# sebagai parameter 
def tampilkan_teks(teks):
    print(teks)

Parameter sendiri memiliki dua jenis yaitu parameter aktual dan 
parameter formal. 

Parameter aktual adalah parameter yang kita deklarasikan pada saat 
kita memanggil fungsi, parameter ini lebih deikenal dengan sebutan 
argumen.

Contoh:

# Memanggil fungsi tampilkan_teks() dengan parameter aktual
tampilkan_teks('Hello World')


Sama dengan argumen, parameter aktual juga dapat dibuat dengan 
variabel dan konstanta.

Parameter formal adalah parameter yang kita deklarasikan pada 
fungsi, parameter ini dibuat di dalam tanda kurung setelah nama 
fungsi.

Contoh:

# Membuat fungsi tampilkan_teks() dengan parameter formal
def tampilkan_teks(teks):
    print(teks)

Poin penting:
[-] Unutk mengirim nilai ke suatu fungsi kita bisa menggunakan
     argumen dan parameter. 
[-] Argumen adalah nilai yang kita berikan pada saat memanggil
    fungsi.
[-] Argumen bisa kita buat dengan variabel atau konstanta.
[-] Parameter adalah variabel yang di buat untuk menerima argumen 
    yang kita berikan.
[-] Parameter mempunyai dua jenis yaitu parameter aktual dan 
    parameter formal.
[-] Parameter aktual adalah argumen dan parameter formal adalah 
    parameter itu sendiri.

Contoh:

# Membuat fungsi dengan parameter
def tampilkan_teks(teks):
    print(teks)

# Memanggil fungsi dengan argumen
tampilkan_teks('Hello World')


Output:

Hello World


Fungsi yang kita buat juga bisa memiliki lebih dari satu parameter. 
Cara membuatnya adalah dengan dengan menambahkan tanda koma untuk 
setiap parameter yang berbeda. yang perlu di ingat saat kita membuat 
fungsi dengan parameter lebih dari satu adalah Argumen Wajib (Required
 Argument).

Argumen Wajib (Required Argument) adalah argumen yang diteruskan ke 
dalam fungsi dengan urutan posisi yang benar dan jumlah argumen pada 
saat memanggil fungsi harus sama persis dengan jumlah parameter fungsi.

Jadi saat kita memanggil fungsi tersebut, kita harus memastikan 
argumen yang kita berikan jumlah dan urutan penulisan-nya sama persis 
dengan parameter fungsi, jika tidak maka program akan eror atau output 
yang di hasilkan tidak sesuai.

Contoh:

def data_diri(nama, umur, alamat):
    print('Nama   :', nama)
    print('Umur   :', umur)
    print('Alamat :', alamat)

data_diri('Diky Indra Hermawanto', 21, 'Bandar Lanpung')


Output:

Nama   : Diky Indra Hermawanto
Umur   : 21
Alamat : Bandar Lampung


Kita juga bisa menambahkan kata kunci pada argumen saat kita 
memanggil fungsi, ini dikenal dengan istilah Argumen Kata Kunci 
(Keyword Argument). Kata kunci ini adalah nama parameter fungsi. 
Ketika kita menggunakan kata kunci pada argumen, fungsi akan 
menentukan argumen dari nama parameter-nya. Hal ini membuat kita 
dapat menempatkan argumen dengan urutan penulisan yang berbeda
dengan parameter fungsi.

Contoh:

def penjumlahan(x, y):
    hasil_penjumlahan = x + y
    print(hasil_penjumlahan)

penjumlahan(y=5, x=5)

Output:

10


Saat membuat fungsi di bahasa pemrograman pyhton, kita dapat 
menambahkan nilai default untuk argumen yang tidak diberikan nilai 
pada saat pemanggilan fungsi. Jadi saat memanggil fungsi meskipun 
kita tidak memberikan argumen pada fungsi yang memiliki parameter, 
fungsi tersebut akan tetap menerima argumen dari nilai yang telah 
kita tetapkan pada saat kita membuat parameter. Ini dikenal dengan 
istilah Argumen Default (Default Argument).

Contoh:

def kirim_pesan(pesan='Maaf, anda belum menginputkan pesan!'):
    print(pesan)

kirim_pesan()


Output:

Maaf, anda belum menginputkan pesan!


Suatu saat mungkin kita ingin menggunakan fungsi untuk memproses 
banyak data sekaligus, dimana seluruh data ini ingin kita teruskan 
ke fungsi melalui argumen. 

Ada beberapa cara untuk meneruskan sejumlah argumen ke suatu 
fungsi,

Cara pertama adalah dengan menulis seluruh argumen dan parameter 
pada fungsi sebanyak data yang kita miliki. dalam hal ini program 
masih akan tetap bisa di jalankan tetapi cara ini membuat kode 
program menjadi sangat panjang dan kurang efektif.

Cara kedua adalah dengan mengguakan list, jadi seluruh data kita 
simpan kedalam list dan kita teruskan sebagai argumen. Cara ini 
berfungsi tetapi setiap kali memanggil fungsi, kita juga perlu 
membuat list argumen untuk diteruskan ke sana. Ini bisa merepotkan, 
terutama jika kita sebelum-nya tidak tahu semua nilai yang harus 
dimasukkan ke dalam list.

Cara ketiga adalah menggunakan simbol khusus pada parameter, di 
bahasa pemrograman pyhton kita dapat mengirimkan sejumlah argumen 
ke suatu fungsi menggunakan simbol khusus yang kita tambahkan pada 
parameter. Ada dua simbol khusus, yaitu *args dan **kwargs. Cara 
ketiga ini lebih efektif karena kita hanya perlu meneruskan seluruh 
argumen yang kita berikan ke satu parameter fungsi.

*args (Argumen Non Kata Kunci)

Sintaks khusus *args dalam definisi fungsi di python digunakan 
untuk meneruskan sejumlah argumen ke suatu fungsi yang tidak 
menggunakan kata kunci. Argumen yang diteruskan dalam bentuk tuple.

Contoh:

def perkalian(*args):
    hasil_perkalian = 1
    for value in args:
        hasil_perkalian = hasil_perkalian * value
    
    print(hasil_perkalian)

perkalian(5, 6, 7, 8, 9, 1, 2)


Output:

30240


**kwargs (Argumen Kata Kunci)

Sintaks khusus **kwargs dalam definisi fungsi di python digunakan 
untuk meneruskan sejumlah argumen yang diberi kata kunci. Argumen 
yang diteruskan dalam bentuk dictionary.

Contoh:

def data_diri(**kwargs):
    for key, value in kwargs.items():
        print('%s = %s' %(key, value))

data_diri(Nama='Diky Indra Hermawanto', Umur=21, Alamat='Bandar Lampung')

Output:

Nama = Diky Indra Hermawanto
Umur = 21
Alamat = Bandar Lampung


Kita tidak diharuskan menggunakan nama "args" dan "kwargs" pada 
penulisan parameter. Kita dapat memilih dan mengguakan nama apapun 
yang kita sukai, yang perlu diperhatikan adalah tanda * dan ** karena 
tanda ini yang akan memberikan keterangan bahwa dia sebenarnya adalah 
Argumen Non Kata Kunci atau Argumen Kata Kunci.

*args dan **kwargs juga dapat kita gunakan bersama dalam satu fungsi.

Contoh: Menggunakan *args dan **kwargs untuk memanggil suatu fungsi

def data_diri(nama, umur, alamat):
    print('Nama   =', nama)
    print('Umur   =', umur)
    print('Alamat =', alamat)

args = ('Diky Indra Hermawanto', 21, 'Bandar Lampung')
data_diri(*args)

kwargs = {'nama':'Diky Indra Hermawanto', 'umur':21, 'alamat':'Bandar Lampung'}
data_diri(**kwargs)

Output:

Nama   = Diky Indra Hermawanto
Umur   = 21
Alamat = Bandar Lampung
Nama   = Diky Indra Hermawanto
Umur   = 21
Alamat = Bandar Lampung


Contoh: Menggunakan *args dan **kwargs di baris yang sama untuk 
memanggil suatu fungsi

def hari(*args, **kwargs):
    for value in args:
        print(value)
    
    for key, value in kwargs.items():
        print('%s = %s' %(key, value))

hari('senin', 'selasa', 
     'rabu', hari_ke_4='kamis', 
      hari_ke_5='jumat', hari_ke_6='sabtu', 
      hari_ke_7='minggu')

Output:

senin
selasa
rabu
hari_ke_4 = kamis
hari_ke_5 = jumat
hari_ke_6 = sabtu
hari_ke_7 = minggu

Referensi:

1.  https://www.pythonindo.com/fungsi/
2.  https://www.pythonindo.com/fungsi-lanjut-python/
3.  https://kopiding.in/fungsi-python/
4.  https://www.programiz.com/python-programming/args-and-kwargs
5.  https://realpython.com/python-kwargs-and-args/
6.  https://www.geeksforgeeks.org/args-kwargs-python/