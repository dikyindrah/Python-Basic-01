Catatan:

Set dan Dictionary

Set dan Dictionary adalah tipe data tidak berurut. Sama seperti
tipe data berurut, Tipe data tidak berurut juga dapat berisi satu 
atau beberapa nilai didalamnya, nilaiâ€“nilai ini sering juga 
disebut dengan item, elemen, atau anggota. Disebut tipe data 
tidak berurut karena setiap item yang ada didalam tipe data ini 
tidak memiliki indeks dan hanya berisi data atau nilai yang unik.

Bahasa pemrograman python memiliki dua tipe data tidak berurut 
yang dapat digunakan yaitu set dan dictionary.


Set 

Set adalah tipe data yang tidak berurut. Set memiliki item yang 
unik (tidak ada item yang sama). Jadi saat kita memasukan dua item 
yang sama di dalam set, maka otomatis set akan menghilangkan salah 
satunya. Item pada set bisa terdiri dari tipe data lain seperti 
tipe data numerik, string, boolean bahkan campuran ketiganya.

Set dibuat dengan menempatkan semua item di dalam tanda kurung 
kurawal {}, dan untuk stiap item yang berbeda dipisahkan oleh 
tanda koma. 

            nama_variabel = {item, item, item}

Contoh:

set_kosong = {}
set_integer = {10, 20, 30, 40, 50}
set_float = {1.0, 2.5, 10.55, 5.5, 4.5}
set_boolean = {True, False, True, False}
set_string = {'aku', 'sedang', 'belajar', 'python'}
set_campuran = {10, 1.0, True, 'python'}

print(set_kosong)
print(set_integer)
print(set_float)
print(set_boolean)
print(set_string)
print(set_campuran)


Output:

{}
{40, 10, 50, 20, 30}
{1.0, 2.5, 4.5, 5.5, 10.55}
{False, True}
{'belajar', 'sedang', 'python', 'aku'}
{1.0, 10, 'python'}


Meskipun item pada set bisa terdiri dari tipe data lain, 
akan tetapi set tidak bisa di isi dengan list atau tuple 
secara langsung. Agar set bisa di isi dengan list atau tuple 
kita perlu menggunakan fungsi set() untuk mengubah tipe data 
list atau tuple menjadi set.

Contoh:

list_integer = [60, 70, 80, 90, 100]
set_integer = {10, 20, 30, 40, 50} 

print(list_integer, type(list_integer))
print(set_integer, type(set_integer))

# Mengubah tipe data list ke set
item_baru = set(list_integer)
# Menambahkan item baru kedalam set_integer
set_integer.update(item_baru)

print(set_integer, '\n')

tuple_string = ('python',)
set_string = {'aku', 'sedang', 'belajar'}

print(tuple_string, type(tuple_string))
print(set_string, type(set_string))

# Mengubah tipe data tuple ke set
item_baru = set(tuple_string)
# Menambahkan item baru kedalam set_string
set_string.update(item_baru)

print(set_string)


Output:

[60, 70, 80, 90, 100] <class 'list'>
{40, 10, 50, 20, 30} <class 'set'>
{100, 70, 40, 10, 80, 50, 20, 90, 60, 30}

('python',) <class 'tuple'>
{'aku', 'belajar', 'sedang'} <class 'set'>
{'aku', 'belajar', 'sedang', 'python'}


Untuk membuat set kosong, kita tidak bisa menggunakan {}, 
karena itu akan dianggap sebagai dictionary. Kita harus 
menggunakan fungsi set() tanpa argumen untuk membuat set 
kosong.

Contoh:

set_kosong = set()
print(set_kosong, type(set_kosong))


Output:

set() <class 'set'>


Set memiliki item yang unik (tidak ada item yang sama). Jadi 
saat kita memasukan dua item yang sama di dalam set, maka 
otomatis set akan menghilangkan salah satunya.

Contoh:

set_dengan_item_yang_sama = {100, 100, 30, 30, 10, 30, 10, 20, 30, 20, 20}

print(set_dengan_item_yang_sama, type(set_dengan_item_yang_sama))

Output:

{10, 100, 20, 30} <class 'set'>


Jika kita tampilkan seluruh item pada set tersebut maka hasilnya 
{10, 100, 20, 30}. Karena setiap item yang ada didalam set tidak 
memiliki indeks, maka urutan item saat kita mendeklarasaikan dan 
menampilkan-nya kemungkinan besar akan berbeda.



Referensi:

1.  